// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id            String    @id @default(uuid())
  name          String    @db.VarChar(100)
  email         String    @unique @db.VarChar(100)
  password      String    @db.VarChar(100)
  ava_image_id  String?   @db.VarChar(255)
  ava_image_url String?   @db.VarChar(255)
  refresh_token String?   @db.VarChar(500)
  verified_at   DateTime? @default(now())

  @@map("admin")
}

model Seller {
  id                       String    @id @default(uuid())
  name                     String    @db.VarChar(100)
  description              String?   @db.Text()
  email                    String    @unique @db.VarChar(100)
  password                 String    @db.VarChar(100)
  province                 String    @db.VarChar(100)
  city                     String    @db.VarChar(100)
  district                 String    @db.VarChar(100)
  village                  String    @db.VarChar(100)
  postal_code              String    @db.VarChar(100)
  address                  String    @db.VarChar(255)
  no_hp                    String    @unique @db.VarChar(15)
  ava_image_id             String?   @db.VarChar(255)
  ava_image_url            String?   @db.VarChar(255)
  link_map_merchant        String?   @db.VarChar(100)
  sample_image_product_id  String?   @db.VarChar(255)
  sample_image_product_url String?   @db.VarChar(255)
  is_active                Boolean   @default(false)
  verified_at              DateTime?
  refresh_token            String?   @db.VarChar(500)
  created_at               DateTime  @default(now())
  updated_at               DateTime  @default(now())
  products                 Product[]

  @@map("sellers")
}

model Customer {
  id            String    @id @default(uuid())
  name          String    @db.VarChar(100)
  email         String    @unique @db.VarChar(100)
  password      String    @db.VarChar(100)
  province      String    @db.VarChar(100)
  city          String    @db.VarChar(100)
  district      String    @db.VarChar(100)
  village       String    @db.VarChar(100)
  postal_code   String    @db.VarChar(100)
  address       String    @db.VarChar(255)
  no_hp         String    @unique @db.VarChar(15)
  ava_image_id  String?   @db.VarChar(255)
  ava_image_url String?   @db.VarChar(255)
  verified_at   DateTime?
  refresh_token String?   @db.VarChar(500)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())
  carts         Cart[]
  orders        Order[]

  @@map("customers")
}

model Product {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(100)
  description String   @db.Text()
  price       Int
  image_id    String   @db.VarChar(255)
  image_url   String   @db.VarChar(255)
  seller_id   String   @db.VarChar(100)
  Seller      Seller   @relation(fields: [seller_id], references: [id])
  is_active   Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  category_id Int
  Category    Category @relation(fields: [category_id], references: [id])
  carts       Cart[]
  orders      Order[]

  @@map("products")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(100)
  products Product[]

  @@map("categories")
}

model Cart {
  id            String   @id @default(uuid())
  total_product Int
  total_price   Int
  customer_id   String
  product_id    String   @unique
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  Product       Product  @relation(fields: [product_id], references: [id])
  Customer      Customer @relation(fields: [customer_id], references: [id])

  @@map("carts")
}

enum order_status {
  SUCCESS
  PROCESS
  PENDING
  FAILED
}

model Order {
  id              String       @id @db.VarChar(191)
  product_id      String
  customer_id     String
  total_product   Int
  total_price     Int
  payment_status  order_status @default(PENDING)
  delivery_status order_status @default(PENDING)
  order_token     String?      @db.VarChar(255)
  link_file       String?      @db.VarChar(255)
  created_at      DateTime     @default(now())
  updated_at      DateTime     @default(now())
  Product         Product      @relation(fields: [product_id], references: [id])
  Customer        Customer     @relation(fields: [customer_id], references: [id])

  @@map("orders")
}
